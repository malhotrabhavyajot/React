{"version":3,"sources":["components/Heading.js","components/UnsplashImage.js","components/Loader.js","searchPhotos.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","header","H1","h1","Heading","className","Img","img","UnsplashImage","url","key","src","alt","Loading","div","Loader","class","GlobalStyle","createGlobalStyle","unsplash","Unsplash","accessKey","SearchPhotos","useState","query","setQuery","images","setImage","searchPhotos","e","a","preventDefault","search","photos","then","toJson","json","results","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","map","image","id","alt_description","urls","full","width","height","App","useEffect","fetchImages","count","apiRoot","process","axios","get","res","data","dataLength","length","next","hasMore","loader","breakpointCols","default","1250","1200","1100","1150","1000","992","900","768","705","576","525","420","columnClassName","thumb","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c863a87f.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Typist from \"react-typist\";\n\nconst Header = styled.header`\n  max-width: 50rem;\n  margin: 1rem auto;\n  text-align: center;\n`;\n\nconst H1 = styled.h1`\n  font-family: \"Segoe UI\", \"Roboto\", \"Oxygen\",\"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\";\n  margin-bottom: 1em;\n`;\n\nexport const Heading = () => {\n\n  return (\n    \n    <Header>\n      <Typist className=\"lead\">\n      <H1>Unsplash Photo Feed</H1>\n      <p>A website dedicated to sharing stock photography under the Unsplash license. The website generates more than 17 billion photo impressions per month on their growing library of over 2 million photos.</p>\n      <p>Created For : Yellow Class</p>\n      </Typist>\n    </Header>    \n  )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Img = styled.img``;\n\nexport const UnsplashImage = ({ url, key }) => {\n  return (\n    <>\n      <Img key={key} src={url} alt=\"\" />\n    </>\n  )\n}\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Loading = styled.div`\n\ntext-align: center;\n.lds-ellipsis {\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n}\n.lds-ellipsis div {\n  position: absolute;\n  top: 33px;\n  width: 13px;\n  height: 13px;\n  border-radius: 50%;\n  background: #222;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\n}\n.lds-ellipsis div:nth-child(1) {\n  left: 8px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(2) {\n  left: 8px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(3) {\n  left: 32px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(4) {\n  left: 56px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n  100% {\n    transform: scale(0);\n  }\n}\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n  100% {\n    transform: translate(24px, 0);\n  }\n}\n`;\n\nexport const Loader = () => {\n  return (\n    <Loading>\n      <div class=\"lds-ellipsis\">\n        <div>\n        </div>\n        <div>\n        </div>\n        <div>\n        </div>\n        <div>\n        </div>\n      </div>\n    </Loading>\n  )\n}\n","import React, { useState } from \"react\";\nimport Unsplash, { toJson } from \"unsplash-js\";\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n`;\n\nconst unsplash = new Unsplash({\n  accessKey: \"Hrz02H4_PT7nMaw25FlMEUdFRjG07OBj8Y1zeK1PTfA\",\n});\nexport default function SearchPhotos() {\n\n  const [query, setQuery] = useState(\"\");\n  const [images, setImage] = useState([]);\n\n\n  const searchPhotos = async (e) => {\n    e.preventDefault();\n\n    unsplash.search\n      .photos(query)\n      .then(toJson)\n      .then((json) => {\n        setImage(json.results);\n      });\n\n  };\n\n  return (\n    <>\n        <GlobalStyle/>\n      <form className=\"form\" onSubmit={searchPhotos}>\n        {\" \"}\n        <label className=\"label\" htmlFor=\"query\">\n          {\" \"}\n          ðŸ“·\n        </label>\n  \n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"input\"\n          placeholder={`Try \"dog\" or \"apple\"`}\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button type=\"submit\" className=\"button\">\n          Search\n        </button>\n      </form>\n\n      <div className=\"card-list\">\n        {images.map((image) => (\n          <div className=\"card\" key={image.id}>\n            <img\n              className=\"card--image\"\n              alt={image.alt_description}\n              src={image.urls.full}\n              width=\"50%\"\n              height=\"50%\"\n            ></img>\n          </div>\n        ))}{\" \"}\n      </div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Heading } from './components/Heading';\nimport { UnsplashImage } from './components/UnsplashImage';\nimport { Loader } from './components/Loader';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Masonry from 'react-masonry-css';\nimport { createGlobalStyle } from 'styled-components';\nimport SearchPhotos from \"./searchPhotos\"\nimport './srch.css';\n// Style\nconst GlobalStyle = createGlobalStyle`\n`;\n\nfunction App() {\n  const [images, setImage] = useState([]);\n\n  useEffect(() => {\n    fetchImages();\n  }, [])\n\n  const fetchImages = (count = 10) => {\n    const apiRoot = \"https://api.unsplash.com\";\n    const accessKey = process.env.REACT_APP_ACCESSKEY;\n\n    axios\n      .get(`${apiRoot}/photos/random?client_id=${accessKey}&count=${count}`)\n      .then(res => {\n        setImage([...images, ...res.data]);\n      })\n  }\n\n  const breakpointColumnsObj = {\n    default: 6,\n    1250: 5,\n    1200: 5,\n    1100: 5,\n    1150: 5,\n    1000:4,\n    992: 4,\n    900:3,\n    768: 3,\n    705:2,\n    576: 1,\n    525: 1,\n    420:1,\n  };\n  return (\n    <div>\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Search Images</h1>\n          <SearchPhotos/>\n          <Heading/>\n          <GlobalStyle/>\n        </div>\n        </div>\n      <InfiniteScroll\n        dataLength={images.length}\n        next={fetchImages}\n        hasMore={true}\n        loader={<Loader />}\n      >\n      <Masonry\n                breakpointCols={breakpointColumnsObj}\n                className=\"masonry-grid\"\n                columnClassName=\"masonry-grid_column\"\n              >\n                 {images.map(image => (\n            <UnsplashImage url={image.urls.thumb} key={image.id} />\n          ))}\n              </Masonry>\n      </InfiniteScroll>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}